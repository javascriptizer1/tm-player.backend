// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: city.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
)

const countCities = `-- name: CountCities :one
SELECT COUNT(*) AS count FROM "cities"
`

func (q *Queries) CountCities(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCityByID = `-- name: GetCityByID :one
SELECT id, name, created_at, updated_at FROM "cities" WHERE "id" = $1
`

type GetCityByIDParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetCityByID(ctx context.Context, arg GetCityByIDParams) (*City, error) {
	row := q.db.QueryRow(ctx, getCityByID, arg.ID)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCityByNameExist = `-- name: GetCityByNameExist :one
SELECT COUNT(*) > 0 FROM "cities" WHERE "name" = $1
`

type GetCityByNameExistParams struct {
	Name string `json:"name"`
}

func (q *Queries) GetCityByNameExist(ctx context.Context, arg GetCityByNameExistParams) (bool, error) {
	row := q.db.QueryRow(ctx, getCityByNameExist, arg.Name)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listCities = `-- name: ListCities :many
SELECT id, name, created_at, updated_at FROM "cities"
LIMIT $2::bigint OFFSET $1::bigint
`

type ListCitiesParams struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func (q *Queries) ListCities(ctx context.Context, arg ListCitiesParams) ([]*City, error) {
	rows, err := q.db.Query(ctx, listCities, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCity = `-- name: UpsertCity :one
INSERT INTO "cities" (
    "id", "name"
) VALUES ($1, $2) ON CONFLICT("id") DO UPDATE SET
    "name" = EXCLUDED."name",
    "updated_at" = DEFAULT
RETURNING "id"
`

type UpsertCityParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpsertCity(ctx context.Context, arg UpsertCityParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upsertCity, arg.ID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
