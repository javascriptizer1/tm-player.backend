// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player.sql

package gensqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countPlayers = `-- name: CountPlayers :one
SELECT COUNT(p.*)
FROM "players" p
LEFT JOIN 
    "player_positions" pp ON p.id = pp.player_id
WHERE 
    ($1::uuid IS NULL OR p.city_id = $1)
    AND ($2::uuid IS NULL OR pp.position_id = $2)
    AND ($3::bigint IS NULL OR p.birthday <= NOW() - INTERVAL '1 year' * $3)
    AND ($4::bigint IS NULL OR p.birthday >= NOW() - INTERVAL '1 year' * $4)
    AND (COALESCE($5::uuid[], '{}') = '{}' OR p.id = ANY($5::uuid[]))
`

type CountPlayersParams struct {
	CityID     *uuid.UUID  `json:"city_id"`
	PositionID *uuid.UUID  `json:"position_id"`
	MaxAge     *int64      `json:"max_age"`
	MinAge     *int64      `json:"min_age"`
	Ids        []uuid.UUID `json:"ids"`
}

func (q *Queries) CountPlayers(ctx context.Context, arg CountPlayersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPlayers,
		arg.CityID,
		arg.PositionID,
		arg.MaxAge,
		arg.MinAge,
		arg.Ids,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT p.id, p.first_name, p.last_name, p.middle_name, p.birthday, p.photo, p.height, p.impact_leg, p.market_value, p.city_id, p.created_at, p.updated_at
FROM 
    "players" p
LEFT JOIN 
    "player_positions" pp ON p.id = pp.player_id
WHERE 
    p.id = $1
`

type GetPlayerByIDParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetPlayerByID(ctx context.Context, arg GetPlayerByIDParams) (*Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByID, arg.ID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Birthday,
		&i.Photo,
		&i.Height,
		&i.ImpactLeg,
		&i.MarketValue,
		&i.CityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getPositionsForPlayers = `-- name: GetPositionsForPlayers :many
SELECT player_id, position_id, main, created_at, updated_at
FROM "player_positions"
WHERE "player_id" = ANY($1::uuid[])
`

type GetPositionsForPlayersParams struct {
	PlayerIds []uuid.UUID `json:"player_ids"`
}

func (q *Queries) GetPositionsForPlayers(ctx context.Context, arg GetPositionsForPlayersParams) ([]*PlayerPosition, error) {
	rows, err := q.db.Query(ctx, getPositionsForPlayers, arg.PlayerIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PlayerPosition
	for rows.Next() {
		var i PlayerPosition
		if err := rows.Scan(
			&i.PlayerID,
			&i.PositionID,
			&i.Main,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayers = `-- name: ListPlayers :many
SELECT p.id, p.first_name, p.last_name, p.middle_name, p.birthday, p.photo, p.height, p.impact_leg, p.market_value, p.city_id, p.created_at, p.updated_at
FROM "players" p
LEFT JOIN 
    "player_positions" pp ON p.id = pp.player_id
WHERE 
    ($1::uuid IS NULL OR p.city_id = $1)
    AND ($2::uuid IS NULL OR pp.position_id = $2)
    AND ($3::bigint IS NULL OR p.birthday <= NOW() - INTERVAL '1 year' * $3)
    AND ($4::bigint IS NULL OR p.birthday >= NOW() - INTERVAL '1 year' * $4)
    AND (COALESCE($5::uuid[], '{}') = '{}' OR p.id = ANY($5::uuid[]))
LIMIT $7::bigint OFFSET $6::bigint
`

type ListPlayersParams struct {
	CityID     *uuid.UUID  `json:"city_id"`
	PositionID *uuid.UUID  `json:"position_id"`
	MaxAge     *int64      `json:"max_age"`
	MinAge     *int64      `json:"min_age"`
	Ids        []uuid.UUID `json:"ids"`
	Offset     int64       `json:"offset"`
	Limit      int64       `json:"limit"`
}

func (q *Queries) ListPlayers(ctx context.Context, arg ListPlayersParams) ([]*Player, error) {
	rows, err := q.db.Query(ctx, listPlayers,
		arg.CityID,
		arg.PositionID,
		arg.MaxAge,
		arg.MinAge,
		arg.Ids,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			&i.Birthday,
			&i.Photo,
			&i.Height,
			&i.ImpactLeg,
			&i.MarketValue,
			&i.CityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trimNotExistingPlayerPositions = `-- name: TrimNotExistingPlayerPositions :many
DELETE FROM "player_positions"
WHERE "player_id" = $1 AND "position_id" NOT IN (SELECT unnest($2::uuid[]))
RETURNING player_id, position_id, main, created_at, updated_at
`

type TrimNotExistingPlayerPositionsParams struct {
	PlayerID            uuid.UUID   `json:"player_id"`
	ExistingPositionIds []uuid.UUID `json:"existing_position_ids"`
}

func (q *Queries) TrimNotExistingPlayerPositions(ctx context.Context, arg TrimNotExistingPlayerPositionsParams) ([]*PlayerPosition, error) {
	rows, err := q.db.Query(ctx, trimNotExistingPlayerPositions, arg.PlayerID, arg.ExistingPositionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PlayerPosition
	for rows.Next() {
		var i PlayerPosition
		if err := rows.Scan(
			&i.PlayerID,
			&i.PositionID,
			&i.Main,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPlayer = `-- name: UpsertPlayer :one
INSERT INTO "players" (
    "id",
    "first_name",
    "last_name",
    "middle_name",
    "birthday",
    "photo",
    "city_id",
    "height",
    "impact_leg",
    "market_value"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) ON CONFLICT("id") DO UPDATE SET
    "first_name" = EXCLUDED."first_name",
    "last_name" = EXCLUDED."last_name",
    "middle_name" = EXCLUDED."middle_name",
    "birthday" = EXCLUDED."birthday",
    "photo" = EXCLUDED."photo",
    "city_id" = EXCLUDED."city_id",
    "height" = EXCLUDED."height",
    "impact_leg" = EXCLUDED."impact_leg",
    "market_value" = EXCLUDED."market_value",
    "updated_at" = DEFAULT
RETURNING "id"
`

type UpsertPlayerParams struct {
	ID          uuid.UUID `json:"id"`
	FirstName   string    `json:"first_name"`
	LastName    string    `json:"last_name"`
	MiddleName  *string   `json:"middle_name"`
	Birthday    time.Time `json:"birthday"`
	Photo       *string   `json:"photo"`
	CityID      uuid.UUID `json:"city_id"`
	Height      int32     `json:"height"`
	ImpactLeg   string    `json:"impact_leg"`
	MarketValue int32     `json:"market_value"`
}

func (q *Queries) UpsertPlayer(ctx context.Context, arg UpsertPlayerParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upsertPlayer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Birthday,
		arg.Photo,
		arg.CityID,
		arg.Height,
		arg.ImpactLeg,
		arg.MarketValue,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const upsertPlayerPositions = `-- name: UpsertPlayerPositions :exec
INSERT INTO "player_positions" ("player_id", "position_id", "main") 
SELECT $1, unnest($2::uuid[]), unnest($3::boolean[])
ON CONFLICT ("player_id", "position_id") DO NOTHING
`

type UpsertPlayerPositionsParams struct {
	PlayerID    uuid.UUID   `json:"player_id"`
	PositionIds []uuid.UUID `json:"position_ids"`
	Mains       []bool      `json:"mains"`
}

func (q *Queries) UpsertPlayerPositions(ctx context.Context, arg UpsertPlayerPositionsParams) error {
	_, err := q.db.Exec(ctx, upsertPlayerPositions, arg.PlayerID, arg.PositionIds, arg.Mains)
	return err
}
