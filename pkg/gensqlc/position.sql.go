// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: position.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
)

const countPositions = `-- name: CountPositions :one
SELECT COUNT(*) AS count FROM "positions"
WHERE ($1::uuid[] = '{}' OR id = ANY($1::uuid[]))
`

type CountPositionsParams struct {
	Ids []uuid.UUID `json:"ids"`
}

func (q *Queries) CountPositions(ctx context.Context, arg CountPositionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPositions, arg.Ids)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPositionByID = `-- name: GetPositionByID :one
SELECT id, name, created_at, updated_at FROM "positions" WHERE "id" = $1
`

type GetPositionByIDParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetPositionByID(ctx context.Context, arg GetPositionByIDParams) (*Position, error) {
	row := q.db.QueryRow(ctx, getPositionByID, arg.ID)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getPositionByNameExist = `-- name: GetPositionByNameExist :one
SELECT COUNT(*) > 0 FROM "positions" WHERE "name" = $1
`

type GetPositionByNameExistParams struct {
	Name string `json:"name"`
}

func (q *Queries) GetPositionByNameExist(ctx context.Context, arg GetPositionByNameExistParams) (bool, error) {
	row := q.db.QueryRow(ctx, getPositionByNameExist, arg.Name)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listPositions = `-- name: ListPositions :many
SELECT id, name, created_at, updated_at FROM "positions"
WHERE ($1::uuid[] = '{}' OR id = ANY($1::uuid[]))
LIMIT $3::bigint OFFSET $2::bigint
`

type ListPositionsParams struct {
	Ids    []uuid.UUID `json:"ids"`
	Offset int64       `json:"offset"`
	Limit  int64       `json:"limit"`
}

func (q *Queries) ListPositions(ctx context.Context, arg ListPositionsParams) ([]*Position, error) {
	rows, err := q.db.Query(ctx, listPositions, arg.Ids, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPosition = `-- name: UpsertPosition :one
INSERT INTO "positions" (
    "id", "name"
) VALUES ($1, $2) ON CONFLICT("id") DO UPDATE SET
    "name" = EXCLUDED."name",
    "updated_at" = DEFAULT
RETURNING "id"
`

type UpsertPositionParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpsertPosition(ctx context.Context, arg UpsertPositionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upsertPosition, arg.ID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
